// Code generated by argsgen.
// DO NOT EDIT!
package options

import (
	"flag"
	"fmt"
	"os"
)

func (o *options) flagSet() *flag.FlagSet {
	flagSet := flag.NewFlagSet(os.Args[0], flag.ExitOnError)
	flagSet.StringVar(&o.i, "i", o.i, "input filename")
	flagSet.StringVar(&o.i, "input", o.i, "input filename")
	flagSet.StringVar(&o.o, "o", o.o, "output filename")
	flagSet.StringVar(&o.o, "output", o.o, "output filename")
	flagSet.StringVar(&o.db, "db", o.db, "database name")
	flagSet.StringVar(&o.db, "database", o.db, "database name")
	flagSet.StringVar(&o.folder, "folder", o.folder, "target folder")
	flagSet.UintVar(&o.parallel, "parallel", o.parallel, "number of process in parallel")
	flagSet.IntVar(&o.limit, "limit", o.limit, "limit of something")
	flagSet.Float64Var(&o.real, "real", o.real, "float of something")
	flagSet.BoolVar(&o.profile, "profile", o.profile, "should it profile?")
	return flagSet
}

// Parse parses the arguments in os.Args
func (o *options) Parse() error {
	flagSet := o.flagSet()
	var positional []string
	args := os.Args[1:]
	for len(args) > 0 {
		if err := flagSet.Parse(args); err != nil {
			return err
		}

		if remaining := flagSet.NArg(); remaining > 0 {
			posIndex := len(args) - remaining
			positional = append(positional, args[posIndex])
			args = args[posIndex+1:]
			continue
		}
		break
	}

	if len(positional) == 0 {
		return nil
	}

	if len(positional) > 0 {
		o.i = positional[0]
	}
	if len(positional) > 0 {
		o.input = positional[0]
	}

	if len(positional) > 1 {
		o.o = positional[1]
	}
	if len(positional) > 1 {
		o.output = positional[1]
	}

	return nil
}

// MustParse parses the arguments in os.Args or exists on error
func (o *options) MustParse() {
	if err := o.Parse(); err != nil {
		o.flagSet().PrintDefaults()
		fmt.Fprintln(os.Stderr)
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
